{
  "RCLCPP Subscriber Declaration": {
    "body": "rclcpp::Subscription<${1:std_msgs::msg::String}>::SharedPtr ${0:sub};",
    "prefix": "subd"
  },
  "RCLCPP Subscriber Definition": {
    "body": "${1:sub} = this->create_subscription<${2:std_msgs::msg::String}>(${3:\"topic\"}, ${4:rclcpp::QoS(10)}, std::bind(&${5:ClassName}::${6:callback}, this, std::placeholders::_1));",
    "prefix": "sub"
  },
  "RCLCPP Subscriber Callback": {
    "body": [
      "void ${1:callback}(const ${2:std_msgs::msg::String}::SharedPtr msg) {",
      "\t${0:RCLCPP_INFO(this->get_logger(), \"Received message: '%s'\", msg->data.c_str());}",
      "}"
    ],
    "prefix": "subcb"
  },

  "RCLCPP Publisher Declaration": {
    "body": "rclcpp::Publisher<${1:std_msgs::msg::String}> ${0:pub};",
    "prefix": "pubd"
  },
  "RCLCPP Publisher Definition": {
    "body": "${1:pub} = this->create_publisher<${2:std_msgs::msg::String}>(${3:\"topic\"}, ${4:rclcpp::QoS(10)});",
    "prefix": "pub"
  },

  "RCLCPP Timer Declaration": {
    "body": "rclcpp::TimerBase::SharedPtr ${0:timer};",
    "prefix": "timed"
  },
  "RCLCPP Timer Definition": {
    "body": "${1:timer} = this->create_wall_timer(${2:std::chrono::seconds(1)}, std::bind(&${3:ClassName}::${4:callback}, this));",
    "prefix": "time"
  },
  "RCLCPP Timer Callback": {
    "body": [
      "void ${1:callback}() {",
      "\t${0:RCLCPP_INFO(this->get_logger(), \"Timer triggered\");}",
      "}"
    ],
    "prefix": "timecb"
  },

  "RCLCPP Service Declaration": {
    "body": "rclcpp::Service<${1:std_srvs::srv::Empty}>::SharedPtr ${0:service};",
    "prefix": "serviced"
  },
  "RCLCPP Service Definition": {
    "body": "${1:service} = this->create_service<${2:std_srvs::srv::Empty}>(${3:\"service_name\"}, std::bind(&${4:ClassName}::${5:callback}, this, std::placeholders::_1, std::placeholders::_2));",
    "prefix": "service"
  },
  "RCLCPP Service Callback": {
    "body": [
      "void ${1:callback}(const std::shared_ptr<${2:std_srvs::srv::Empty}::Request> request, std::shared_ptr<${2}::Response> response) {",
      "${0:\tRCLCPP_INFO(this->get_logger(), \"Service called\");}",
      "}"
    ],
    "prefix": "servicecb"
  },

  "RCLCPP Client Declaration": {
    "body": "rclcpp::Client<${1:std_srvs::srv::Empty}>::SharedPtr ${0:client};",
    "prefix": "clientd"
  },
  "RCLCPP Client Definition": {
    "body": "${1:client} = this->create_client<${2:std_srvs::srv::Empty}>(${3:\"service_name\"});",
    "prefix": "client"
  },

  "RCLCPP Log Info": {
    "body": "RCLCPP_INFO(this->get_logger(), \"${1:message}\");",
    "prefix": "rclinfo"
  },
  "RCLCPP Log Info Stream": {
    "body": "RCLCPP_INFO_STREAM(this->get_logger(), \"${1:message}\");",
    "prefix": "rclinfos"
  },
  "RCLCPP Log Warn": {
    "body": "RCLCPP_WARN(this->get_logger(), \"${1:message}\");",
    "prefix": "rclwarn"
  },
  "RCLCPP Log Warn Stream": {
    "body": "RCLCPP_WARN_STREAM(this->get_logger(), \"${1:message}\");",
    "prefix": "rclwarns"
  },
  "RCLCPP Log Error": {
    "body": "RCLCPP_ERROR(this->get_logger(), \"${1:message}\");",
    "prefix": "rclerror"
  },
  "RCLCPP Log Error Stream": {
    "body": "RCLCPP_ERROR_STREAM(this->get_logger(), \"${1:message}\");",
    "prefix": "rclerrors"
  },

  "TF2 Lookup": {
    "body": [
      "geometry_msgs::msg::TransformStamped transform;",
      "try {",
      "\ttransform = ${1:tf_buffer}.lookupTransform(${2:\"target_frame\"}, ${3:\"source_frame\"}, rclcpp::Time(0));",
      "} catch (const tf2::TransformException &ex) {",
      "\tRCLCPP_ERROR(this->get_logger(), \"Could not transform %s to %s: %s\", ${3:\"source_frame\"}.c_str(), ${2:\"target_frame\"}.c_str(), ex.what());",
      "}"
    ],
    "prefix": "tfl"
  },

  "TF2 Do Transform": {
    "body": [
      "geometry_msgs::msg::PoseStamped transformed_pose;",
      "try {",
      "\ttransformed_pose = ${1:tf2}.doTransform(${2:pose}, ${3:\"target_frame\"});",
      "} catch (const tf2::TransformException &ex) {",
      "\tRCLCPP_ERROR(this->get_logger(), \"Could not transform pose: %s\", ex.what());",
      "}"
    ],
    "prefix": "tfd"
  },

  "Viusalization Marker": {
    "body": [
      "visualization_msgs::msg::Marker marker;",
      "marker.header.frame_id = ${1:\"frame_id\"};",
      "marker.header.stamp = this->now();",
      "marker.ns = ${2:\"namespace\"};",
      "marker.id = ${3:0};",
      "marker.type = visualization_msgs::msg::Marker::${4:CUBE};",
      "marker.action = visualization_msgs::msg::Marker::ADD;",
      "marker.scale.x = ${12:1.0};",
      "marker.scale.y = ${13:1.0};",
      "marker.scale.z = ${14:1.0};",
      "marker.color.a = 1.0; // Don't forget to set the alpha!"
    ],
    "prefix": "vismarker"
  }
}
